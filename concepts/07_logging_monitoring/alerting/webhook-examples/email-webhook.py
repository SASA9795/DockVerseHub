# 07_logging_monitoring/alerting/webhook-examples/email-webhook.py

import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from flask import Flask, request, jsonify
from datetime import datetime
import os
import logging
from jinja2 import Template

app = Flask(__name__)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Email configuration
SMTP_SERVER = os.getenv('SMTP_SERVER', 'localhost')
SMTP_PORT = int(os.getenv('SMTP_PORT', '587'))
SMTP_USERNAME = os.getenv('SMTP_USERNAME', 'alerts@example.com')
SMTP_PASSWORD = os.getenv('SMTP_PASSWORD', 'password')
SMTP_USE_TLS = os.getenv('SMTP_USE_TLS', 'true').lower() == 'true'
FROM_EMAIL = os.getenv('FROM_EMAIL', 'alerts@example.com')
TO_EMAILS = os.getenv('TO_EMAILS', 'admin@example.com').split(',')

# Email templates
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Alert Notification</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
        .header { background: {% if severity == 'critical' %}#dc3545{% elif severity == 'warning' %}#ffc107{% else %}#17a2b8{% endif %}; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .alert-info { margin-bottom: 20px; }
        .alert-info h3 { margin-top: 0; color: #333; }
        .labels, .annotations { background: #f8f9fa; padding: 10px; border-radius: 3px; margin: 10px 0; }
        .label-item, .annotation-item { margin: 5px 0; }
        .label-key, .annotation-key { font-weight: bold; color: #495057; }
        .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 12px; color: #6c757d; }
        .button { display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 3px; margin: 10px 5px 10px 0; }
        .status-firing { color: #dc3545; font-weight: bold; }
        .status-resolved { color: #28a745; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h2>ðŸš¨ Alert Notification</h2>
            <p>{{ alert_count }} alert(s) {{ status }}</p>
        </div>
        
        {% for alert in alerts %}
        <div class="alert-info">
            <h3>{{ alert.annotations.get('summary', 'Alert Triggered') }}</h3>
            
            <p><strong>Status:</strong> 
                <span class="status-{{ alert.status }}">{{ alert.status.upper() }}</span>
            </p>
            
            <p><strong>Alert Name:</strong> {{ alert.labels.get('alertname', 'Unknown') }}</p>
            <p><strong>Instance:</strong> {{ alert.labels.get('instance', 'Unknown') }}</p>
            <p><strong>Severity:</strong> {{ alert.labels.get('severity', 'unknown').upper() }}</p>
            
            {% if alert.annotations.get('description') %}
            <p><strong>Description:</strong> {{ alert.annotations.get('description') }}</p>
            {% endif %}
            
            <div class="labels">
                <h4>Labels:</h4>
                {% for key, value in alert.labels.items() %}
                <div class="label-item">
                    <span class="label-key">{{ key }}:</span> {{ value }}
                </div>
                {% endfor %}
            </div>
            
            {% if alert.annotations %}
            <div class="annotations">
                <h4>Annotations:</h4>
                {% for key, value in alert.annotations.items() %}
                <div class="annotation-item">
                    <span class="annotation-key">{{ key }}:</span> {{ value }}
                </div>
                {% endfor %}
            </div>
            {% endif %}
            
            {% if alert.generatorURL %}
            <p><a href="{{ alert.generatorURL }}" class="button">View Graph</a></p>
            {% endif %}
            
            {% if alert.annotations.get('runbook_url') %}
            <p><a href="{{ alert.annotations.get('runbook_url') }}" class="button">View Runbook</a></p>
            {% endif %}
        </div>
        {% if not loop.last %}<hr>{% endif %}
        {% endfor %}
        
        <div class="footer">
            <p>This alert was generated by AlertManager at {{ timestamp }}</p>
            <p>Group Key: {{ group_key }}</p>
        </div>
    </div>
</body>
</html>
"""

TEXT_TEMPLATE = """
ALERT NOTIFICATION
==================

Alert Count: {{ alert_count }}
Status: {{ status }}
Group Key: {{ group_key }}
Timestamp: {{ timestamp }}

{% for alert in alerts %}
Alert #{{ loop.index }}
-----------
Alert Name: {{ alert.labels.get('alertname', 'Unknown') }}
Status: {{ alert.status.upper() }}
Instance: {{ alert.labels.get('instance', 'Unknown') }}
Severity: {{ alert.labels.get('severity', 'unknown').upper() }}
Summary: {{ alert.annotations.get('summary', 'No summary available') }}

{% if alert.annotations.get('description') %}
Description: {{ alert.annotations.get('description') }}
{% endif %}

Labels:
{% for key, value in alert.labels.items() %}
  {{ key }}: {{ value }}
{% endfor %}

{% if alert.annotations %}
Annotations:
{% for key, value in alert.annotations.items() %}
  {{ key }}: {{ value }}
{% endfor %}
{% endif %}

{% if alert.generatorURL %}
Graph URL: {{ alert.generatorURL }}
{% endif %}

{% if alert.annotations.get('runbook_url') %}
Runbook URL: {{ alert.annotations.get('runbook_url') }}
{% endif %}

{% if not loop.last %}
================================================================================
{% endif %}
{% endfor %}

--
This alert was generated by AlertManager
"""

def send_email(subject, html_body, text_body, to_emails=None):
    """Send email notification"""
    if to_emails is None:
        to_emails = TO_EMAILS
    
    try:
        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = FROM_EMAIL
        msg['To'] = ', '.join(to_emails)
        
        # Add text and HTML parts
        text_part = MIMEText(text_body, 'plain')
        html_part = MIMEText(html_body, 'html')
        
        msg.attach(text_part)
        msg.attach(html_part)
        
        # Connect to SMTP server and send email
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        
        if SMTP_USE_TLS:
            server.starttls()
        
        if SMTP_USERNAME and SMTP_PASSWORD:
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
        
        server.send_message(msg)
        server.quit()
        
        logger.info(f"Email sent successfully to {', '.join(to_emails)}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to send email: {e}")
        return False

def generate_email_content(data):
    """Generate email content from alert data"""
    alerts = data.get('alerts', [])
    group_key = data.get('groupKey', 'unknown')
    
    # Separate firing and resolved alerts
    firing_alerts = [alert for alert in alerts if alert.get('status') == 'firing']
    resolved_alerts = [alert for alert in alerts if alert.get('status') == 'resolved']
    
    all_alerts = firing_alerts + resolved_alerts
    
    # Determine overall status and severity
    if firing_alerts:
        status = 'firing'
        severities = [alert.get('labels', {}).get('severity', 'info') for alert in firing_alerts]
        if 'critical' in severities:
            severity = 'critical'
        elif 'warning' in severities:
            severity = 'warning'
        else:
            severity = 'info'
    else:
        status = 'resolved'
        severity = 'info'
    
    # Create template context
    context = {
        'alerts': all_alerts,
        'alert_count': len(all_alerts),
        'status': status,
        'severity': severity,
        'group_key': group_key,
        'timestamp': datetime.utcnow().isoformat() + 'Z'
    }
    
    # Generate email content
    html_template = Template(HTML_TEMPLATE)
    text_template = Template(TEXT_TEMPLATE)
    
    html_body = html_template.render(**context)
    text_body = text_template.render(**context)
    
    # Generate subject line
    if status == 'firing':
        if severity == 'critical':
            subject_prefix = "[CRITICAL]"
        elif severity == 'warning':
            subject_prefix = "[WARNING]"
        else:
            subject_prefix = "[INFO]"
    else:
        subject_prefix = "[RESOLVED]"
    
    if len(all_alerts) == 1:
        alert_name = all_alerts[0].get('labels', {}).get('alertname', 'Alert')
        subject = f"{subject_prefix} {alert_name}"
    else:
        subject = f"{subject_prefix} {len(all_alerts)} alerts"
    
    return subject, html_body, text_body

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.utcnow().isoformat(),
        'smtp_server': SMTP_SERVER,
        'smtp_port': SMTP_PORT,
        'from_email': FROM_EMAIL,
        'to_emails': TO_EMAILS
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Main webhook endpoint for AlertManager"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
        
        logger.info(f"Received webhook data: {json.dumps(data, indent=2)}")
        
        alerts = data.get('alerts', [])
        if not alerts:
            return jsonify({'error': 'No alerts in payload'}), 400
        
        # Generate email content
        subject, html_body, text_body = generate_email_content(data)
        
        # Send email
        success = send_email(subject, html_body, text_body)
        
        if success:
            return jsonify({
                'message': 'Email notification sent successfully',
                'alert_count': len(alerts),
                'recipients': TO_EMAILS
            }), 200
        else:
            return jsonify({'error': 'Failed to send email notification'}), 500
        
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/test', methods=['POST'])
def test_email():
    """Test endpoint to send a sample alert email"""
    test_data = {
        "alerts": [
            {
                "status": "firing",
                "labels": {
                    "alertname": "TestAlert",
                    "severity": "warning",
                    "instance": "test-instance:8080",
                    "job": "test-job",
                    "service": "test-service"
                },
                "annotations": {
                    "summary": "Test alert for email notification",
                    "description": "This is a test alert to verify email webhook integration",
                    "runbook_url": "https://runbooks.example.com/test-alert"
                },
                "generatorURL": "http://prometheus:9090/graph"
            }
        ],
        "groupKey": "test-group"
    }
    
    subject, html_body, text_body = generate_email_content(test_data)
    success = send_email(subject, html_body, text_body)
    
    return jsonify({
        'message': 'Test email sent' if success else 'Failed to send test email',
        'success': success,
        'subject': subject,
        'recipients': TO_EMAILS
    }), 200 if success else 500

if __name__ == '__main__':
    port = int(os.getenv('PORT', 8082))
    debug = os.getenv('DEBUG', 'false').lower() == 'true'
    
    logger.info(f"Starting email webhook service on port {port}")
    logger.info(f"SMTP Server: {SMTP_SERVER}:{SMTP_PORT}")
    logger.info(f"From: {FROM_EMAIL}")
    logger.info(f"To: {', '.join(TO_EMAILS)}")
    
    app.run(host='0.0.0.0', port=port, debug=debug)