# 10_ci_cd_integration/gitlab-ci/docker-in-docker.yml

# GitLab CI Docker-in-Docker (DinD) Configuration
# Advanced Docker builds with BuildKit and multi-platform support

variables:
  # Docker daemon configuration
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

  # BuildKit configuration
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain
  BUILDKIT_COLORS: 1

  # Registry configuration
  CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE
  REGISTRY_STORAGE_DRIVER: overlay2

  # Performance optimization
  DOCKER_DRIVER: overlay2
  DOCKER_TMPFS: /var/lib/docker:rw,noexec,nosuid,size=2g

.docker-base:
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: docker
      command:
        - --storage-driver=overlay2
        - --mtu=1450
        - --registry-mirror=https://mirror.gcr.io
        - --insecure-registry=gitlab-registry-mirror.local
        - --max-concurrent-downloads=10
        - --max-concurrent-uploads=5
  before_script:
    - |
      # Wait for Docker daemon
      timeout 300 bash -c '
        until docker info >/dev/null 2>&1; do
          echo "Waiting for Docker daemon..."
          sleep 2
        done
      '
    - echo "Docker daemon is ready"
    - docker version
    - docker info

    # Login to registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

    # Setup BuildKit builder
    - docker buildx create --use --name ci-builder --driver docker-container --bootstrap
    - docker buildx ls

# Basic Docker build job
.docker-build-base:
  extends: .docker-base
  stage: build
  script:
    - |
      # Build with BuildKit
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:cache \
        --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:cache,mode=max \
        --build-arg BUILDTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA} \
        --build-arg REVISION=$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --push \
        .

# Multi-stage Docker build
docker-build-multistage:
  extends: .docker-build-base
  variables:
    DOCKERFILE: Dockerfile.multistage
  script:
    - |
      # Build test stage for unit tests
      docker buildx build \
        --platform linux/amd64 \
        --target test \
        --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:test-cache \
        --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:test-cache,mode=max \
        --tag $CI_REGISTRY_IMAGE:test \
        --load \
        -f $DOCKERFILE \
        .

      # Run tests in container
      docker run --rm $CI_REGISTRY_IMAGE:test

      # Build production stage
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --target production \
        --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:cache \
        --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:cache,mode=max \
        --build-arg BUILDTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA} \
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE:latest \
        --push \
        -f $DOCKERFILE \
        .

# Docker Compose build and test
docker-compose-build:
  extends: .docker-base
  before_script:
    - !reference [.docker-base, before_script]
    - apk add --no-cache docker-compose
  script:
    - |
      # Export build arguments
      export BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      export VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
      export REVISION=$CI_COMMIT_SHA

      # Build with docker-compose
      docker-compose -f docker-compose.ci.yml build --parallel

      # Run services for testing
      docker-compose -f docker-compose.ci.yml up -d

      # Wait for services to be ready
      timeout 120 bash -c '
        until docker-compose -f docker-compose.ci.yml exec -T web curl -f http://localhost:3000/health; do
          echo "Waiting for application..."
          sleep 5
        done
      '

      # Run integration tests
      docker-compose -f docker-compose.ci.yml exec -T web npm run test:integration

      # Push images
      docker-compose -f docker-compose.ci.yml push
  after_script:
    - docker-compose -f docker-compose.ci.yml down -v --remove-orphans

# Kaniko builds (rootless)
kaniko-build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  before_script:
    - |
      # Configure Kaniko
      mkdir -p /kaniko/.docker
      echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
  script:
    - |
      /kaniko/executor \
        --context $CI_PROJECT_DIR \
        --dockerfile $CI_PROJECT_DIR/Dockerfile \
        --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --destination $CI_REGISTRY_IMAGE:latest \
        --cache=true \
        --cache-ttl=24h \
        --build-arg BUILDTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA} \
        --build-arg REVISION=$CI_COMMIT_SHA

# Buildah builds (alternative to Docker)
buildah-build:
  stage: build
  image: quay.io/buildah/stable:latest
  before_script:
    - |
      # Login to registry
      echo $CI_REGISTRY_PASSWORD | buildah login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      # Build with Buildah
      buildah build \
        --build-arg BUILDTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA} \
        --build-arg REVISION=$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE:latest \
        .

      # Push images
      buildah push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      buildah push $CI_REGISTRY_IMAGE:latest

# Advanced BuildKit features
buildkit-advanced:
  extends: .docker-base
  variables:
    BUILDKIT_INLINE_CACHE: 1
  script:
    - |
      # Create custom builder with specific configuration
      docker buildx create \
        --name advanced-builder \
        --driver docker-container \
        --driver-opt image=moby/buildkit:v0.12.0 \
        --driver-opt network=host \
        --use

      # Build with advanced BuildKit features
      docker buildx build \
        --platform linux/amd64,linux/arm64,linux/arm/v7 \
        --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:cache \
        --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:cache,mode=max \
        --cache-from type=local,src=/tmp/.buildx-cache \
        --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
        --output type=image,name=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA,push=true \
        --output type=registry,name=$CI_REGISTRY_IMAGE:latest,push=true \
        --build-arg BUILDTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA} \
        --metadata-file /tmp/metadata.json \
        --provenance=true \
        --sbom=true \
        .

      # Move cache to prevent cache bloat
      rm -rf /tmp/.buildx-cache
      mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - /tmp/.buildx-cache
  artifacts:
    paths:
      - /tmp/metadata.json
    expire_in: 1 day

# Secure builds with secrets
docker-build-secrets:
  extends: .docker-base
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - !reference [.docker-base, before_script]
    - |
      # Prepare secrets
      echo "$SSH_PRIVATE_KEY" > /tmp/ssh_key
      chmod 600 /tmp/ssh_key
      echo "$NPM_TOKEN" > /tmp/npm_token
  script:
    - |
      # Build with secrets mounted
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --secret id=ssh_key,src=/tmp/ssh_key \
        --secret id=npm_token,src=/tmp/npm_token \
        --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:cache \
        --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:cache,mode=max \
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --push \
        -f Dockerfile.secrets \
        .
  after_script:
    - rm -f /tmp/ssh_key /tmp/npm_token

# Performance optimized builds
docker-build-performance:
  extends: .docker-base
  variables:
    # Optimize Docker daemon for CI
    DOCKER_DAEMON_OPTIONS: >
      --storage-driver=overlay2
      --storage-opt overlay2.override_kernel_check=true
      --max-concurrent-downloads=10
      --max-concurrent-uploads=5
      --default-ulimit nofile=1024000:1024000
  before_script:
    - !reference [.docker-base, before_script]
    - |
      # Optimize Docker for performance
      echo '{"experimental": true, "features": {"buildkit": true}}' > /etc/docker/daemon.json

      # Pre-pull base images
      docker pull node:18-alpine &
      docker pull alpine:latest &
      wait
  script:
    - |
      # Parallel multi-stage build
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:cache \
        --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:cache,mode=max \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --build-arg BUILDKIT_MULTI_PLATFORM=1 \
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --push \
        --progress=plain \
        .

# Vulnerability scanning during build
docker-build-scan:
  extends: .docker-base
  before_script:
    - !reference [.docker-base, before_script]
    - |
      # Install scanning tools
      apk add --no-cache curl
      curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - |
      # Build image
      docker buildx build \
        --platform linux/amd64 \
        --load \
        --tag $CI_REGISTRY_IMAGE:scan \
        .

      # Scan for vulnerabilities
      trivy image --exit-code 0 --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $CI_REGISTRY_IMAGE:scan
      trivy image --exit-code 1 --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE:scan

      # If scan passes, push to registry
      docker tag $CI_REGISTRY_IMAGE:scan $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 1 week

# Cleanup job for DinD
cleanup-docker:
  extends: .docker-base
  stage: cleanup
  script:
    - |
      # Clean up Docker resources
      docker system prune -af --volumes
      docker builder prune -af
      docker buildx prune -af

      # Remove dangling images
      docker image prune -af

      # Clean build cache
      docker buildx du
      docker buildx prune --keep-storage 1GB
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  allow_failure: true

# Troubleshooting job
debug-docker:
  extends: .docker-base
  stage: build
  script:
    - |
      echo "=== Docker Environment Debug ==="
      docker version
      docker info
      docker system df

      echo "=== BuildKit Debug ==="
      docker buildx ls
      docker buildx du

      echo "=== Registry Debug ==="
      docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY <<< "$CI_REGISTRY_PASSWORD"

      echo "=== Build Context Debug ==="
      ls -la
      du -sh .

      echo "=== Network Debug ==="
      ping -c 3 docker
      netstat -tulpn
  when: manual
  allow_failure: true
