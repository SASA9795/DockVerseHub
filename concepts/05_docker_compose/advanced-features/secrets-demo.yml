# File Location: concepts/05_docker_compose/advanced-features/secrets-demo.yml

version: "3.8"

services:
  # Web application using secrets
  web:
    image: nginx:alpine
    ports:
      - "8080:80"
    secrets:
      - ssl_cert
      - ssl_key
      - api_key
    volumes:
      - ./nginx-with-secrets.conf:/etc/nginx/nginx.conf:ro
    environment:
      - API_KEY_FILE=/run/secrets/api_key
    networks:
      - secure-network

  # Database using secrets
  database:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=secretsdb
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
      - db_ssl_cert
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - secure-network

  # Application with multiple secret types
  app:
    image: python:3.9-slim
    command: |
      sh -c '
        echo "Reading secrets from /run/secrets/"
        echo "API Key: $(cat /run/secrets/api_key | head -c 20)..."
        echo "DB Password: $(cat /run/secrets/db_password | head -c 5)***"
        echo "JWT Secret: $(cat /run/secrets/jwt_secret | head -c 10)..."
        
        # Simulate application using secrets
        python -c "
        import os
        import time
        
        def read_secret(secret_name):
            try:
                with open(f\"/run/secrets/{secret_name}\", \"r\") as f:
                    return f.read().strip()
            except FileNotFoundError:
                return None
        
        api_key = read_secret(\"api_key\")
        db_password = read_secret(\"db_password\") 
        jwt_secret = read_secret(\"jwt_secret\")
        
        print(f\"Application started with secrets loaded\")
        print(f\"API Key length: {len(api_key) if api_key else 0}\")
        print(f\"DB Password length: {len(db_password) if db_password else 0}\")
        print(f\"JWT Secret length: {len(jwt_secret) if jwt_secret else 0}\")
        
        while True:
            print(f\"App running with secrets at {time.ctime()}\")
            time.sleep(60)
        "
      '
    secrets:
      - api_key
      - db_password
      - jwt_secret
    networks:
      - secure-network
    depends_on:
      - database

  # Secret rotation demo service
  secret-rotator:
    image: alpine:latest
    command: |
      sh -c '
        apk add --no-cache openssl
        while true; do
          echo "Checking secret rotation at $(date)"
          
          # Check current secret timestamps
          ls -la /run/secrets/
          
          # In production, this would trigger secret rotation
          echo "Secret rotation check completed"
          sleep 3600  # Check every hour
        done
      '
    secrets:
      - api_key
      - jwt_secret
    networks:
      - secure-network

# Secrets configuration
secrets:
  # External secrets (managed outside of compose)
  api_key:
    external: true

  # Secrets from files
  db_password:
    file: ./secrets/db_password.txt

  ssl_cert:
    file: ./secrets/ssl_cert.pem

  ssl_key:
    file: ./secrets/ssl_key.pem

  # Generated secret (for development)
  jwt_secret:
    file: ./secrets/jwt_secret.txt

volumes:
  db-data:

networks:
  secure-network:
    driver: bridge
# Setup instructions:
# 1. Create secrets directory:
#    mkdir -p secrets
#
# 2. Generate secrets:
#    echo "super-secret-api-key-12345" > secrets/api_key.txt
#    echo "database-password-67890" > secrets/db_password.txt
#    openssl rand -base64 32 > secrets/jwt_secret.txt
#
# 3. Generate SSL certificates:
#    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
#      -keyout secrets/ssl_key.pem \
#      -out secrets/ssl_cert.pem \
#      -subj "/CN=localhost"
#
# 4. Create external secret:
#    echo "external-api-key" | docker secret create api_key -
#
# 5. Start services:
#    docker-compose -f secrets-demo.yml up -d
#
# Security notes:
# - Secrets are mounted in memory (tmpfs)
# - Not visible in docker inspect
# - Automatically cleaned up when container stops
# - Use external secrets for production
# - Rotate secrets regularly
