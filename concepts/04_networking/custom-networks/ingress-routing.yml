# File Location: concepts/04_networking/custom-networks/ingress-routing.yml

version: "3.8"

services:
  # Ingress controller (Traefik)
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ingress-network

  # App 1 - API service
  api:
    image: nginx:alpine
    container_name: api-service
    volumes:
      - ./api-content:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=80"
    networks:
      - ingress-network
      - backend-network

  # App 2 - Web frontend
  frontend:
    image: nginx:alpine
    container_name: frontend-service
    volumes:
      - ./frontend-content:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - ingress-network
      - backend-network

  # App 3 - Admin panel
  admin:
    image: nginx:alpine
    container_name: admin-service
    volumes:
      - ./admin-content:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.localhost`)"
      - "traefik.http.routers.admin.entrypoints=web"
      - "traefik.http.services.admin.loadbalancer.server.port=80"
      # Add authentication middleware
      - "traefik.http.middlewares.admin-auth.basicauth.users=admin:$$2y$$10$$..."
      - "traefik.http.routers.admin.middlewares=admin-auth"
    networks:
      - ingress-network
      - backend-network

  # Database (backend only)
  database:
    image: postgres:13-alpine
    container_name: database
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend-network

volumes:
  db-data:

networks:
  ingress-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true
