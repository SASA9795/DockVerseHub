# File: .github/workflows/docs-deploy.yml
name: Documentation Deployment

on:
  push:
    branches: [main]
    paths:
      - "docs/**"
      - "README.md"
      - "mkdocs.yml"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin mkdocs-git-revision-date-localized-plugin

      - name: Create MkDocs configuration
        run: |
          cat > mkdocs.yml << 'EOF'
          site_name: DockVerseHub Documentation
          site_description: 'Comprehensive Docker learning hub with hands-on labs and real-world examples'
          site_url: 'https://dockversehub.github.io/'
          repo_url: 'https://github.com/dockversehub/DockVerseHub'
          repo_name: 'dockversehub/DockVerseHub'

          theme:
            name: material
            palette:
              - media: "(prefers-color-scheme: light)"
                scheme: default
                primary: blue
                accent: blue
                toggle:
                  icon: material/toggle-switch-off-outline
                  name: Switch to dark mode
              - media: "(prefers-color-scheme: dark)"
                scheme: slate
                primary: blue
                accent: blue
                toggle:
                  icon: material/toggle-switch
                  name: Switch to light mode
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.top
              - navigation.tracking
              - search.highlight
              - search.share
              - toc.integrate
              - content.code.copy
              - content.action.edit
              - content.action.view

          plugins:
            - search
            - mermaid2
            - git-revision-date-localized:
                type: date

          markdown_extensions:
            - pymdownx.highlight:
                anchor_linenums: true
            - pymdownx.inlinehilite
            - pymdownx.snippets
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:mermaid2.fence_mermaid
            - pymdownx.tabbed:
                alternate_style: true
            - admonition
            - pymdownx.details
            - pymdownx.keys
            - pymdownx.mark
            - pymdownx.tilde
            - attr_list
            - md_in_html

          nav:
            - Home: 'index.md'
            - Getting Started:
              - Installation: 'getting-started/installation.md'
              - First Steps: 'getting-started/first-steps.md'
              - Basic Commands: 'getting-started/basic-commands.md'
            - Core Concepts:
              - Docker Basics: 'concepts/docker-basics.md'
              - Images vs Containers: 'concepts/images-vs-containers.md'
              - Networking: 'concepts/networking.md'
              - Volumes & Storage: 'concepts/volumes-storage.md'
              - Docker Compose: 'concepts/docker-compose.md'
            - Hands-on Labs:
              - Lab 1 - Simple App: 'labs/lab-01-simple-app.md'
              - Lab 2 - Multi-Container: 'labs/lab-02-multi-container.md'
              - Lab 3 - Image Optimization: 'labs/lab-03-optimization.md'
              - Lab 4 - Logging Dashboard: 'labs/lab-04-logging.md'
              - Lab 5 - Microservices: 'labs/lab-05-microservices.md'
              - Lab 6 - Production: 'labs/lab-06-production.md'
            - Advanced Topics:
              - Security: 'advanced/security.md'
              - Monitoring: 'advanced/monitoring.md'
              - Orchestration: 'advanced/orchestration.md'
              - CI/CD Integration: 'advanced/ci-cd.md'
              - Performance: 'advanced/performance.md'
            - Utilities:
              - Scripts: 'utilities/scripts.md'
              - Templates: 'utilities/templates.md'
              - Tools: 'utilities/tools.md'
            - Contributing: 'contributing.md'
            - Changelog: 'changelog.md'
          EOF

      - name: Generate documentation index
        run: |
          mkdir -p docs_site

          cat > docs_site/index.md << 'EOF'
          # Welcome to DockVerseHub

          ![Docker](https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white)
          ![Docker Compose](https://img.shields.io/badge/Docker_Compose-2496ED?style=for-the-badge&logo=docker&logoColor=white)

          DockVerseHub is your comprehensive Docker learning companion, featuring hands-on labs, real-world examples, and production-ready configurations.

          ## 🚀 Quick Start

          1. **Clone the repository**
          ```bash
          git clone https://github.com/dockversehub/DockVerseHub.git
          cd DockVerseHub
          ```

          2. **Start with concepts**
          Begin your Docker journey with our structured learning path in the `concepts/` directory.

          3. **Practice with labs**
          Apply your knowledge with hands-on exercises in the `labs/` directory.

          ## 📚 What You'll Learn

          ### Core Concepts
          - Container fundamentals and lifecycle
          - Image creation and optimization
          - Networking and service discovery
          - Data persistence with volumes
          - Multi-container applications with Compose

          ### Advanced Topics
          - Security best practices and hardening
          - Monitoring and logging strategies
          - Container orchestration with Swarm
          - CI/CD pipeline integration
          - Performance optimization techniques

          ### Practical Labs
          - Containerizing applications
          - Building multi-service architectures
          - Implementing monitoring dashboards
          - Production deployment strategies
          - Microservices patterns

          ## 🗺️ Learning Paths

          ### Beginner (0-3 months)
          1. Docker basics and container concepts
          2. Dockerfile best practices
          3. Docker Compose fundamentals
          4. Basic networking and volumes

          ### Intermediate (3-6 months)
          1. Multi-stage builds and optimization
          2. Security practices and scanning
          3. Logging and monitoring setup
          4. Service orchestration

          ### Advanced (6-12 months)
          1. Production deployment patterns
          2. Microservices architecture
          3. Performance tuning and scaling
          4. Advanced orchestration

          ## 🛠️ Repository Structure

          ```
          DockVerseHub/
          ├── concepts/          # Core Docker concepts with examples
          ├── labs/              # Hands-on practical exercises  
          ├── docs/              # In-depth guides and references
          ├── utilities/         # Helper scripts and templates
          ├── case-studies/      # Real-world implementation stories
          └── .devcontainer/     # Development environment setup
          ```

          ## 🤝 Contributing

          We welcome contributions! See our [Contributing Guide](contributing.md) for details.

          ## 📄 License

          This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
          EOF

      - name: Copy documentation files
        run: |
          # Copy README files from different sections
          cp README.md docs_site/

          # Create section pages from directory READMEs
          mkdir -p docs_site/{getting-started,concepts,labs,advanced,utilities}

          # Getting started content
          cat > docs_site/getting-started/installation.md << 'EOF'
          # Docker Installation Guide

          ## System Requirements
          - 64-bit processor with Second Level Address Translation (SLAT)
          - 4GB system RAM
          - BIOS-level hardware virtualization support enabled

          ## Installation by Platform

          ### Windows
          1. Download Docker Desktop for Windows
          2. Run the installer
          3. Restart your computer
          4. Verify installation: `docker --version`

          ### macOS  
          1. Download Docker Desktop for Mac
          2. Drag Docker to Applications folder
          3. Launch Docker Desktop
          4. Verify installation: `docker --version`

          ### Linux (Ubuntu/Debian)
          ```bash
          # Update package index
          sudo apt-get update

          # Install prerequisites
          sudo apt-get install ca-certificates curl gnupg lsb-release

          # Add Docker GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          # Add Docker repository
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install Docker Engine
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

          # Verify installation
          sudo docker run hello-world
          ```

          ## Post-Installation Steps
          1. Add your user to the docker group (Linux): `sudo usermod -aG docker $USER`
          2. Configure Docker to start on boot
          3. Verify Docker Compose is installed: `docker compose version`
          EOF

          # Create other documentation pages
          find concepts/ -name "README.md" -exec cp {} docs_site/concepts/ \; 2>/dev/null || true
          find labs/ -name "README.md" -exec cp {} docs_site/labs/ \; 2>/dev/null || true

      - name: Build documentation site
        run: |
          mkdocs build --clean --verbose
          echo "📚 Documentation built successfully"
          ls -la site/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          cname: dockversehub.io
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"

      - name: Generate deployment report
        run: |
          echo "# 📚 Documentation Deployment Report" > docs-deployment-report.md
          echo "Generated: $(date)" >> docs-deployment-report.md
          echo "Commit: ${{ github.sha }}" >> docs-deployment-report.md
          echo "" >> docs-deployment-report.md

          echo "## Deployment Status" >> docs-deployment-report.md
          if [ -d "site" ]; then
            echo "✅ Documentation built successfully" >> docs-deployment-report.md
            echo "📊 **Site size:** $(du -sh site/ | cut -f1)" >> docs-deployment-report.md
            echo "📄 **Pages generated:** $(find site/ -name "*.html" | wc -l)" >> docs-deployment-report.md
          else
            echo "❌ Documentation build failed" >> docs-deployment-report.md
          fi

          echo "" >> docs-deployment-report.md
          echo "## Site Map" >> docs-deployment-report.md
          find site/ -name "*.html" | head -20 | sed 's|site/||' | sed 's|^|- |' >> docs-deployment-report.md

          echo "" >> docs-deployment-report.md
          echo "## Access Information" >> docs-deployment-report.md
          echo "- **URL:** https://dockversehub.io" >> docs-deployment-report.md
          echo "- **Repository:** https://github.com/${{ github.repository }}" >> docs-deployment-report.md
          echo "- **Branch:** gh-pages" >> docs-deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: docs-deployment-report
          path: docs-deployment-report.md
          retention-days: 30

  validate-links:
    name: Validate Documentation Links
    runs-on: ubuntu-latest
    needs: [build-docs]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install link checker
        run: npm install -g markdown-link-check

      - name: Check internal links
        run: |
          echo "# 🔗 Link Validation Report" > link-check-report.md
          echo "Generated: $(date)" >> link-check-report.md
          echo "" >> link-check-report.md

          echo "## Internal Link Check" >> link-check-report.md

          # Check markdown files for broken links
          find docs/ -name "*.md" -type f | while read file; do
            echo "### Checking: $file" >> link-check-report.md
            markdown-link-check "$file" --config .github/link-check-config.json >> link-check-report.md 2>&1 || true
            echo "" >> link-check-report.md
          done

      - name: Create link checker config
        run: |
          mkdir -p .github
          cat > .github/link-check-config.json << 'EOF'
          {
            "ignorePatterns": [
              {
                "pattern": "^http://localhost"
              },
              {
                "pattern": "^https://localhost"
              },
              {
                "pattern": "^http://127.0.0.1"
              }
            ],
            "timeout": "20s",
            "retryOn429": true,
            "retryCount": 3,
            "fallbackRetryDelay": "30s",
            "aliveStatusCodes": [200, 206]
          }
          EOF

      - name: Upload link validation report
        uses: actions/upload-artifact@v3
        with:
          name: link-validation-report
          path: link-check-report.md
          retention-days: 30
