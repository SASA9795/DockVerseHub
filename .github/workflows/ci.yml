# File: .github/workflows/ci.yml
name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 pylint yamllint

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Node.js dependencies
        run: |
          npm install -g markdownlint-cli prettier

      - name: Lint Python files
        run: |
          find . -name "*.py" -not -path "./.git/*" -not -path "./venv/*" | head -20 | while read file; do
            echo "Linting: $file"
            black --check --diff "$file" || true
            flake8 "$file" --max-line-length=88 || true
          done

      - name: Lint YAML files
        run: |
          find . -name "*.yml" -o -name "*.yaml" -not -path "./.git/*" | head -20 | while read file; do
            echo "Linting: $file"
            yamllint "$file" || true
          done

      - name: Lint Markdown files
        run: |
          find . -name "*.md" -not -path "./.git/*" -not -path "./node_modules/*" | head -20 | while read file; do
            echo "Linting: $file"
            markdownlint "$file" --config .markdownlint.yml || true
          done

      - name: Format check with Prettier
        run: |
          prettier --check "**/*.{json,yml,yaml}" || true

  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: "*/Dockerfile*"
          recursive: true
          ignore: "DL3008,DL3009,DL3015"
          failure-threshold: warning

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [lint, dockerfile-lint]
    strategy:
      matrix:
        component:
          - concepts/01_getting_started
          - concepts/02_images_layers
          - concepts/03_volumes_bindmounts
          - concepts/04_networking
          - concepts/05_docker_compose
          - labs/lab_01_simple_app
          - labs/lab_02_multi_container_compose
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          if [ -f "${{ matrix.component }}/Dockerfile" ]; then
            echo "Building ${{ matrix.component }}"
            docker build -t dockversehub-test:${{ github.sha }}-$(echo ${{ matrix.component }} | tr '/' '-') ${{ matrix.component }}
          elif [ -f "${{ matrix.component }}/docker-compose.yml" ]; then
            echo "Building with compose: ${{ matrix.component }}"
            cd ${{ matrix.component }}
            docker-compose build
          else
            echo "No Dockerfile or docker-compose.yml found in ${{ matrix.component }}"
          fi

      - name: Test Docker containers
        run: |
          if [ -f "${{ matrix.component }}/docker-compose.yml" ]; then
            cd ${{ matrix.component }}
            docker-compose up -d
            sleep 10
            docker-compose ps
            docker-compose down
          fi

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install test dependencies
        run: |
          pip install pytest docker-compose requests pyyaml

      - name: Run integration tests
        run: |
          if [ -f "tests/test_integration.py" ]; then
            pytest tests/test_integration.py -v
          else
            echo "No integration tests found, creating basic test"
            mkdir -p tests
            cat > tests/test_basic.py << 'EOF'
          import docker
          import pytest

          def test_docker_connection():
              client = docker.from_env()
              assert client.ping() == True

          def test_docker_version():
              client = docker.from_env()
              version = client.version()
              assert 'Version' in version
          EOF
            pytest tests/test_basic.py -v
          fi

  security-basic:
    name: Basic Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "0"

      - name: Check for sensitive files
        run: |
          echo "Checking for sensitive files..."
          find . -name "*.key" -o -name "*.pem" -o -name "*_rsa" -o -name "*.p12" | grep -v ".git" || echo "No sensitive files found"

          echo "Checking for hardcoded secrets..."
          grep -r -i "password\s*=" . --include="*.py" --include="*.js" --include="*.yml" --include="*.yaml" | grep -v "example\|sample\|placeholder" || echo "No hardcoded passwords found"

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose files
        run: |
          find . -name "docker-compose*.yml" -not -path "./.git/*" | while read file; do
            echo "Validating: $file"
            docker-compose -f "$file" config || echo "Warning: $file has validation issues"
          done

      - name: Check README examples
        run: |
          echo "Checking README files for broken examples..."
          find . -name "README.md" -not -path "./.git/*" | while read file; do
            echo "Checking: $file"
            # Extract and validate docker commands from README files
            grep -o "docker.*" "$file" | head -5 | while read cmd; do
              echo "Found command: $cmd"
            done || echo "No Docker commands found in $file"
          done

  generate-report:
    name: Generate CI Report
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        dockerfile-lint,
        build-test,
        integration-tests,
        security-basic,
        validate-examples,
      ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate CI Report
        run: |
          echo "# CI Pipeline Report" > ci-report.md
          echo "Generated: $(date)" >> ci-report.md
          echo "" >> ci-report.md
          echo "## Job Status" >> ci-report.md
          echo "- Lint: ${{ needs.lint.result }}" >> ci-report.md
          echo "- Dockerfile Lint: ${{ needs.dockerfile-lint.result }}" >> ci-report.md
          echo "- Build Test: ${{ needs.build-test.result }}" >> ci-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> ci-report.md
          echo "- Security Basic: ${{ needs.security-basic.result }}" >> ci-report.md
          echo "- Validate Examples: ${{ needs.validate-examples.result }}" >> ci-report.md

      - name: Upload CI Report
        uses: actions/upload-artifact@v3
        with:
          name: ci-report
          path: ci-report.md
          retention-days: 30
