# File Location: labs/lab_05_microservices_demo/api-gateway/nginx.conf

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format with tracing
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'trace_id="$http_x_trace_id"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=1r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # Upstream definitions
    upstream user-service {
        least_conn;
        server user-service:5000 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }

    upstream order-service {
        least_conn;
        server order-service:8080 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }

    upstream notification-service {
        least_conn;
        server notification-service:3000 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }

    # Security headers map
    map $sent_http_content_type $header_csp {
        ~^text/html "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';";
        default "";
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy $header_csp always;
        add_header X-Forwarded-Proto $scheme always;

        # Connection limiting
        limit_conn conn_limit_per_ip 20;
        limit_conn conn_limit_per_server 1000;

        # Global rate limiting
        limit_req zone=global burst=20 nodelay;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API Gateway status
        location /gateway/status {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","services":["user-service","order-service","notification-service"]}';
            add_header Content-Type application/json;
        }

        # Authentication endpoints
        location ~ ^/api/auth/ {
            limit_req zone=auth burst=5 nodelay;
            
            # Add tracing headers
            proxy_set_header X-Trace-Id $request_id;
            proxy_set_header X-Span-Id $request_id;
            
            # Forward to user service for authentication
            proxy_pass http://user-service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # User service endpoints
        location ~ ^/api/users/ {
            limit_req zone=api burst=10 nodelay;
            
            # Authentication check
            access_by_lua_block {
                local auth_header = ngx.var.http_authorization
                if not auth_header then
                    ngx.status = 401
                    ngx.say('{"error":"Authorization header required"}')
                    ngx.exit(401)
                end
            }
            
            proxy_pass http://user-service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Trace-Id $request_id;
            proxy_cache_bypass $http_upgrade;
            
            # Enable caching for GET requests
            location ~ ^/api/users/[0-9]+$ {
                proxy_cache_methods GET HEAD;
                proxy_cache_valid 200 5m;
                proxy_cache_key "$scheme$request_method$host$request_uri";
            }
        }

        # Order service endpoints
        location ~ ^/api/orders/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://order-service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Trace-Id $request_id;
            
            # Circuit breaker simulation
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
        }

        # Notification service endpoints
        location ~ ^/api/notifications/ {
            limit_req zone=api burst=5 nodelay;
            
            proxy_pass http://notification-service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Trace-Id $request_id;
        }

        # File upload endpoints
        location /api/upload {
            limit_req zone=upload burst=2 nodelay;
            client_max_body_size 50M;
            
            proxy_pass http://user-service;
            proxy_request_buffering off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket endpoints
        location /ws/ {
            proxy_pass http://notification-service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Metrics endpoint for monitoring
        location /metrics {
            proxy_pass http://prometheus:9090/metrics;
            proxy_set_header Host $host;
        }

        # Admin endpoints (restricted)
        location /admin/ {
            allow 192.168.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;
            
            proxy_pass http://user-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Default fallback
        location / {
            return 404 '{"error":"Endpoint not found","available_endpoints":["/api/users","/api/orders","/api/notifications","/health"]}';
            add_header Content-Type application/json;
        }

        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;
        
        location = /404.json {
            internal;
            return 404 '{"error":"Not Found","code":404}';
            add_header Content-Type application/json;
        }
        
        location = /50x.json {
            internal;
            return 500 '{"error":"Internal Server Error","code":500}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server (for production)
    server {
        listen 443 ssl http2;
        server_name localhost;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Include all the same locations as HTTP server
        include /etc/nginx/conf.d/rate-limiting.conf;
    }
}