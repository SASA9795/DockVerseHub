# File Location: labs/lab_02_multi_container_compose/docker-compose.prod.yml

version: "3.8"

services:
  # PostgreSQL Database - Production Configuration
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: fullstack_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fullstack_app}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/migrations:/migrations
    networks:
      - backend
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-fullstack_app}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: fullstack_redis_prod
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - backend
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"
        reservations:
          memory: 256M
          cpus: "0.1"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Python API Backend - Production Configuration
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-app_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-fullstack_app}
      REDIS_URL: redis://redis:6379/0
      FLASK_ENV: production
      API_SECRET_KEY: ${API_SECRET_KEY}
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-4}
      GUNICORN_THREADS: ${GUNICORN_THREADS:-2}
    volumes:
      - api_logs_prod:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # React Frontend - Production Build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: fullstack_frontend_prod
    environment:
      NODE_ENV: production
    volumes:
      - static_files_prod:/app/build
    networks:
      - frontend
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"

  # Nginx Reverse Proxy - Production Configuration
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      target: production
    container_name: fullstack_nginx_prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_files_prod:/var/www/static:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - api
    networks:
      - frontend
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
        reservations:
          memory: 128M
          cpus: "0.1"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring and Health Checks
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_SCHEDULE: "0 0 4 * * *"
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-frontend-prod
    labels:
      - "com.example.network=frontend-prod"
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-backend-prod
    internal: true
    labels:
      - "com.example.network=backend-prod"

volumes:
  postgres_data_prod:
    driver: local
    labels:
      - "com.example.volume=postgres_data_prod"
  redis_data_prod:
    driver: local
    labels:
      - "com.example.volume=redis_data_prod"
  api_logs_prod:
    driver: local
    labels:
      - "com.example.volume=api_logs_prod"
  static_files_prod:
    driver: local
    labels:
      - "com.example.volume=static_files_prod"
  nginx_cache:
    driver: local
    labels:
      - "com.example.volume=nginx_cache"
  nginx_logs:
    driver: local
    labels:
      - "com.example.volume=nginx_logs"
