# File Location: labs/lab_02_multi_container_compose/docker-compose.yml

version: "3.8"

services:
  # PostgreSQL Database
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: fullstack_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fullstack_app}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/migrations:/migrations
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-fullstack_app}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fullstack_redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: fullstack_api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-app_user}:${POSTGRES_PASSWORD:-secure_password}@db:5432/${POSTGRES_DB:-fullstack_app}
      REDIS_URL: redis://redis:6379/0
      FLASK_ENV: ${FLASK_ENV:-development}
      API_SECRET_KEY: ${API_SECRET_KEY:-dev-secret-key}
    volumes:
      - ./api:/app
      - api_logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fullstack_frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000}
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - frontend
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: fullstack_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - api
    networks:
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  frontend:
    driver: bridge
    labels:
      - "com.example.network=frontend"
  backend:
    driver: bridge
    labels:
      - "com.example.network=backend"

volumes:
  postgres_data:
    driver: local
    labels:
      - "com.example.volume=postgres_data"
  redis_data:
    driver: local
    labels:
      - "com.example.volume=redis_data"
  api_logs:
    driver: local
    labels:
      - "com.example.volume=api_logs"
  static_files:
    driver: local
    labels:
      - "com.example.volume=static_files"
