# Location: labs/lab_06_production_deployment/docker-compose.prod.yml
version: "3.8"

services:
  # Reverse Proxy & Load Balancer
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl/certificates:/etc/nginx/ssl:ro
      - ./nginx/static:/var/www/static:ro
      - nginx-logs:/var/log/nginx
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
    depends_on:
      - user-service
      - order-service
      - notification-service
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # User Service
  user-service:
    build:
      context: ../../lab_05_microservices_demo/user-service
      dockerfile: Dockerfile
    container_name: user-service-prod
    environment:
      - DATABASE_URL=postgresql://userdb_user:${USERDB_PASSWORD}@postgres-user:5432/userdb
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - KAFKA_BROKERS=kafka:29092
      - JAEGER_AGENT_HOST=jaeger
      - PROMETHEUS_PORT=9090
    depends_on:
      postgres-user:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Order Service
  order-service:
    build:
      context: ../../lab_05_microservices_demo/order-service
      dockerfile: Dockerfile
    container_name: order-service-prod
    environment:
      - DATABASE_URL=postgresql://orderdb_user:${ORDERDB_PASSWORD}@postgres-order:5432/orderdb
      - REDIS_URL=redis://redis:6379/1
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - KAFKA_BROKERS=kafka:29092
      - USER_SERVICE_URL=http://user-service:8000
      - JAEGER_AGENT_HOST=jaeger
      - PROMETHEUS_PORT=9091
    depends_on:
      postgres-order:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Notification Service
  notification-service:
    build:
      context: ../../lab_05_microservices_demo/notification-service
      dockerfile: Dockerfile
    container_name: notification-service-prod
    environment:
      - MONGODB_URL=mongodb://notifydb_user:${NOTIFYDB_PASSWORD}@mongodb:27017/notifydb
      - REDIS_URL=redis://redis:6379/2
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - KAFKA_BROKERS=kafka:29092
      - JAEGER_AGENT_HOST=jaeger
      - PROMETHEUS_PORT=9092
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # PostgreSQL - User Service Database
  postgres-user:
    image: postgres:15-alpine
    container_name: postgres-user-prod
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: userdb_user
      POSTGRES_PASSWORD: ${USERDB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
      - ./backup-scripts/init-user-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userdb_user -d userdb"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"

  # PostgreSQL - Order Service Database
  postgres-order:
    image: postgres:15-alpine
    container_name: postgres-order-prod
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: orderdb_user
      POSTGRES_PASSWORD: ${ORDERDB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
      - ./backup-scripts/init-order-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderdb_user -d orderdb"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"

  # MongoDB - Notification Service Database
  mongodb:
    image: mongo:7-jammy
    container_name: mongodb-prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: notifydb
    volumes:
      - mongodb-data:/data/db
      - ./backup-scripts/init-mongo.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Kafka Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-prod
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus-prod
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.external-url=https://${DOMAIN}/prometheus"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerting-rules.yml:/etc/prometheus/rules/alerting.yml:ro
      - prometheus-data:/prometheus
    networks:
      - backend
      - monitoring
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://${DOMAIN}/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres-grafana:5432
      GF_DATABASE_NAME: grafanadb
      GF_DATABASE_USER: grafana_user
      GF_DATABASE_PASSWORD: ${GRAFANA_DB_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      postgres-grafana:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    networks:
      - backend
      - monitoring
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Grafana Database
  postgres-grafana:
    image: postgres:15-alpine
    container_name: postgres-grafana-prod
    environment:
      POSTGRES_DB: grafanadb
      POSTGRES_USER: grafana_user
      POSTGRES_PASSWORD: ${GRAFANA_DB_PASSWORD}
    volumes:
      - postgres-grafana-data:/var/lib/postgresql/data
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grafana_user -d grafanadb"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Distributed Tracing - Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: jaeger-prod
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
    ports:
      - "16686:16686"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - backend
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # Elasticsearch for Jaeger
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch-prod
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      xpack.security.enabled: false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  # Log Aggregation - Fluentd
  fluentd:
    build:
      context: ./monitoring/fluentd
    container_name: fluentd-prod
    volumes:
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    depends_on:
      - elasticsearch
    networks:
      - monitoring
    restart: unless-stopped

volumes:
  nginx-logs:
  postgres-user-data:
  postgres-order-data:
  postgres-grafana-data:
  mongodb-data:
  redis-data:
  kafka-data:
  zookeeper-data:
  zookeeper-log:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.32.0.0/16
