# Location: utilities/compose-templates/microservices.yml
# Docker Compose template for microservices architecture

version: "3.8"

services:
  # API Gateway
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./api-gateway/ssl:/etc/nginx/ssl:ro
    depends_on:
      - user-service
      - order-service
      - product-service
    restart: unless-stopped
    networks:
      - frontend
      - backend

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://user:password@user-db:5432/userdb
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      user-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
      - user-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://order:password@order-db:5432/orderdb
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - USER_SERVICE_URL=http://user-service:8001
    depends_on:
      order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
      - order-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    environment:
      - MONGODB_URL=mongodb://product-mongo:27017/productdb
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      product-mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
      - product-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - EMAIL_SERVICE_API_KEY=${EMAIL_SERVICE_API_KEY}
      - SMS_SERVICE_API_KEY=${SMS_SERVICE_API_KEY}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Database
  user-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - user_data:/var/lib/postgresql/data
    networks:
      - user-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Order Database
  order-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: order
      POSTGRES_PASSWORD: password
    volumes:
      - order_data:/var/lib/postgresql/data
    networks:
      - order-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order -d orderdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Product Database (MongoDB)
  product-mongo:
    image: mongo:6-jammy
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: productdb
    volumes:
      - mongo_data:/data/db
    networks:
      - product-net
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/productdb --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - product-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  user_data:
  order_data:
  mongo_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  user-net:
    driver: bridge
  order-net:
    driver: bridge
  product-net:
    driver: bridge
