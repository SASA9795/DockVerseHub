#!/bin/bash
# Location: utilities/security/vulnerability-scanning/trivy-scanning.sh
# Trivy vulnerability scanner for Docker images and containers

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
TRIVY_CACHE_DIR="${HOME}/.trivy"
REPORTS_DIR="trivy-reports"
SEVERITY_LEVELS="UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
DEFAULT_FORMAT="table"
EXIT_CODE=0

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Create reports directory
mkdir -p "$REPORTS_DIR"

# Function to check if Trivy is installed
check_trivy() {
    if ! command -v trivy &> /dev/null; then
        print_error "Trivy is not installed"
        echo "Install with: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin"
        exit 1
    fi
    
    print_success "Trivy $(trivy --version | grep -oP 'Version: \K[^\s]+')"
}

# Function to update Trivy database
update_db() {
    print_status "Updating Trivy vulnerability database..."
    trivy image --download-db-only --cache-dir "$TRIVY_CACHE_DIR"
    print_success "Database updated successfully"
}

# Function to scan Docker image
scan_image() {
    local image="$1"
    local format="$2"
    local severity="$3"
    local output_file="$4"
    
    print_status "Scanning image: $image"
    
    local scan_args=(
        "image"
        "--cache-dir" "$TRIVY_CACHE_DIR"
        "--severity" "$severity"
        "--format" "$format"
    )
    
    if [ -n "$output_file" ]; then
        scan_args+=("--output" "$output_file")
    fi
    
    # Add security checks
    scan_args+=(
        "--security-checks" "vuln,secret,config"
        "--skip-files" "/usr/share/doc/*,/usr/share/man/*"
    )
    
    scan_args+=("$image")
    
    if trivy "${scan_args[@]}"; then
        if [ -n "$output_file" ]; then
            print_success "Scan completed. Report saved to: $output_file"
        else
            print_success "Scan completed"
        fi
        return 0
    else
        print_error "Scan failed for $image"
        return 1
    fi
}

# Function to scan filesystem
scan_filesystem() {
    local path="$1"
    local format="$2"
    local severity="$3"
    local output_file="$4"
    
    print_status "Scanning filesystem: $path"
    
    local scan_args=(
        "fs"
        "--cache-dir" "$TRIVY_CACHE_DIR"
        "--severity" "$severity"
        "--format" "$format"
        "--security-checks" "vuln,secret,config,license"
    )
    
    if [ -n "$output_file" ]; then
        scan_args+=("--output" "$output_file")
    fi
    
    scan_args+=("$path")
    
    if trivy "${scan_args[@]}"; then
        print_success "Filesystem scan completed"
        return 0
    else
        print_error "Filesystem scan failed"
        return 1
    fi
}

# Function to scan running container
scan_container() {
    local container="$1"
    local format="$2"
    local severity="$3"
    local output_file="$4"
    
    print_status "Scanning running container: $container"
    
    # Get container image
    local image=$(docker inspect "$container" --format='{{.Config.Image}}' 2>/dev/null)
    if [ -z "$image" ]; then
        print_error "Container $container not found"
        return 1
    fi
    
    scan_image "$image" "$format" "$severity" "$output_file"
}

# Function to generate SARIF report for GitHub
generate_sarif() {
    local image="$1"
    local output_file="$REPORTS_DIR/${image//[\/:]/_}_sarif.json"
    
    print_status "Generating SARIF report for $image"
    
    trivy image \
        --cache-dir "$TRIVY_CACHE_DIR" \
        --format sarif \
        --output "$output_file" \
        "$image"
    
    print_success "SARIF report generated: $output_file"
}

# Function to generate JSON report with details
generate_json_report() {
    local image="$1"
    local output_file="$REPORTS_DIR/${image//[\/:]/_}_detailed.json"
    
    print_status "Generating detailed JSON report for $image"
    
    trivy image \
        --cache-dir "$TRIVY_CACHE_DIR" \
        --format json \
        --severity "$SEVERITY_LEVELS" \
        --security-checks "vuln,secret,config" \
        --output "$output_file" \
        "$image"
    
    print_success "Detailed JSON report generated: $output_file"
}

# Function to scan multiple images
scan_multiple_images() {
    local images=("$@")
    local failed_scans=0
    
    print_status "Scanning ${#images[@]} images..."
    
    for image in "${images[@]}"; do
        local output_file="$REPORTS_DIR/${image//[\/:]/_}_report.txt"
        
        if ! scan_image "$image" "table" "$SEVERITY_LEVELS" "$output_file"; then
            ((failed_scans++))
        fi
        
        # Generate additional reports
        generate_json_report "$image"
        generate_sarif "$image"
        
        echo ""
    done
    
    if [ $failed_scans -gt 0 ]; then
        print_warning "$failed_scans scans failed"
        EXIT_CODE=1
    else
        print_success "All scans completed successfully"
    fi
}

# Function to scan with policy
scan_with_policy() {
    local image="$1"
    local policy_file="$2"
    
    if [ ! -f "$policy_file" ]; then
        print_error "Policy file not found: $policy_file"
        return 1
    fi
    
    print_status "Scanning $image with policy: $policy_file"
    
    trivy image \
        --cache-dir "$TRIVY_CACHE_DIR" \
        --security-checks "vuln,config" \
        --policy "$policy_file" \
        --format table \
        "$image"
}

# Function to ignore vulnerabilities
create_trivyignore() {
    local ignore_file=".trivyignore"
    
    cat > "$ignore_file" << 'EOF'
# Trivy ignore file
# Add CVE IDs to ignore specific vulnerabilities
# CVE-2023-1234
# CVE-2023-5678

# Ignore vulnerabilities in specific files
# /usr/bin/example

# Ignore by package name
# pkg:apk/alpine/package-name@version
EOF
    
    print_success "Created $ignore_file template"
}

# Function to clean old reports
clean_reports() {
    local days_old="${1:-7}"
    
    print_status "Cleaning reports older than $days_old days..."
    
    find "$REPORTS_DIR" -type f -mtime +$days_old -delete
    
    print_success "Old reports cleaned"
}

# Function to show help
show_help() {
    echo "Trivy Vulnerability Scanner Script"
    echo "Usage: $0 COMMAND [OPTIONS]"
    echo ""
    echo "COMMANDS:"
    echo "  image IMAGE             Scan Docker image"
    echo "  container CONTAINER     Scan running container"
    echo "  filesystem PATH         Scan filesystem"
    echo "  multiple IMAGE1 IMAGE2  Scan multiple images"
    echo "  update-db              Update vulnerability database"
    echo "  clean-reports [DAYS]   Clean old reports (default: 7 days)"
    echo ""
    echo "OPTIONS:"
    echo "  --severity LEVELS      Severity levels (default: $SEVERITY_LEVELS)"
    echo "  --format FORMAT        Output format (table, json, sarif)"
    echo "  --output FILE          Output file"
    echo "  --policy FILE          Policy file for compliance scanning"
    echo "  --ignore-unfixed       Ignore unfixed vulnerabilities"
    echo "  --create-ignore        Create .trivyignore template"
    echo ""
    echo "Examples:"
    echo "  $0 image nginx:latest"
    echo "  $0 multiple nginx:latest alpine:latest"
    echo "  $0 container web-server --format json"
    echo "  $0 filesystem /app --severity HIGH,CRITICAL"
}

# Parse command line arguments
COMMAND=""
TARGETS=()
FORMAT="$DEFAULT_FORMAT"
SEVERITY="$SEVERITY_LEVELS"
OUTPUT_FILE=""
POLICY_FILE=""
IGNORE_UNFIXED=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --severity)
            SEVERITY="$2"
            shift 2
            ;;
        --format)
            FORMAT="$2"
            shift 2
            ;;
        --output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --policy)
            POLICY_FILE="$2"
            shift 2
            ;;
        --ignore-unfixed)
            IGNORE_UNFIXED=true
            shift
            ;;
        --create-ignore)
            create_trivyignore
            exit 0
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        image|container|filesystem|multiple|update-db|clean-reports)
            COMMAND="$1"
            shift
            ;;
        *)
            TARGETS+=("$1")
            shift
            ;;
    esac
done

# Check Trivy installation
check_trivy

# Execute command
case "$COMMAND" in
    image)
        if [ ${#TARGETS[@]} -eq 0 ]; then
            print_error "Image name required"
            show_help
            exit 1
        fi
        
        if [ -n "$POLICY_FILE" ]; then
            scan_with_policy "${TARGETS[0]}" "$POLICY_FILE"
        else
            scan_image "${TARGETS[0]}" "$FORMAT" "$SEVERITY" "$OUTPUT_FILE"
        fi
        ;;
    
    container)
        if [ ${#TARGETS[@]} -eq 0 ]; then
            print_error "Container name required"
            show_help
            exit 1
        fi
        scan_container "${TARGETS[0]}" "$FORMAT" "$SEVERITY" "$OUTPUT_FILE"
        ;;
    
    filesystem)
        if [ ${#TARGETS[@]} -eq 0 ]; then
            print_error "Filesystem path required"
            show_help
            exit 1
        fi
        scan_filesystem "${TARGETS[0]}" "$FORMAT" "$SEVERITY" "$OUTPUT_FILE"
        ;;
    
    multiple)
        if [ ${#TARGETS[@]} -eq 0 ]; then
            print_error "At least one image name required"
            show_help
            exit 1
        fi
        scan_multiple_images "${TARGETS[@]}"
        ;;
    
    update-db)
        update_db
        ;;
    
    clean-reports)
        clean_reports "${TARGETS[0]:-7}"
        ;;
    
    *)
        print_error "No command specified"
        show_help
        exit 1
        ;;
esac

exit $EXIT_CODE