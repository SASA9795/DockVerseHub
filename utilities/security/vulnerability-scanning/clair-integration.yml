# Location: utilities/security/vulnerability-scanning/clair-integration.yml
# Clair vulnerability scanner Docker Compose setup

version: "3.8"

services:
  # Clair v4 main service
  clair:
    image: quay.io/coreos/clair:4.7.4
    container_name: clair
    depends_on:
      - clair-db
    ports:
      - "6060:6060" # HTTP API
      - "6061:6061" # Health check
    environment:
      CLAIR_CONF: /etc/clair/config.yaml
      CLAIR_MODE: combo
    volumes:
      - ./clair-config:/etc/clair:ro
      - clair-data:/var/lib/clair
    command: ["clair", "-conf", "/etc/clair/config.yaml"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6061/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database for Clair
  clair-db:
    image: postgres:15-alpine
    container_name: clair-db
    environment:
      POSTGRES_DB: clair
      POSTGRES_USER: clair
      POSTGRES_PASSWORD: clair-password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - clair-db-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_destination=stderr
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clair -d clair"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Clair scanner CLI tool
  clair-scanner:
    build:
      context: ./clair-scanner
      dockerfile: Dockerfile
    container_name: clair-scanner
    depends_on:
      clair:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./scan-results:/results
    environment:
      CLAIR_URL: http://clair:6060
      CLAIR_OUTPUT: /results
    profiles:
      - tools
    command: ["tail", "-f", "/dev/null"] # Keep container running

  # Clair vulnerability updater
  clair-updater:
    image: quay.io/coreos/clair:4.7.4
    container_name: clair-updater
    depends_on:
      clair-db:
        condition: service_healthy
    environment:
      CLAIR_CONF: /etc/clair/config.yaml
      CLAIR_MODE: updater
    volumes:
      - ./clair-config:/etc/clair:ro
    command: ["clair", "-conf", "/etc/clair/config.yaml", "-updater"]
    restart: "no"
    profiles:
      - updater

  # Grafana for Clair metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: clair-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    profiles:
      - monitoring
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: clair-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  clair-data:
    driver: local
  clair-db-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  default:
    name: clair-network
    driver: bridge
# Configuration files structure:
#
# clair-config/
# ├── config.yaml           # Main Clair configuration
# ├── updater.yaml          # Updater configuration
# └── notifier.yaml         # Notification configuration
#
# clair-scanner/
# ├── Dockerfile            # Scanner container
# ├── scan.sh               # Scanning script
# └── requirements.txt      # Dependencies
#
# grafana/
# ├── dashboards/
# │   └── clair-dashboard.json
# └── datasources/
#     └── prometheus.yml
#
# Example Clair config.yaml:
# ---
# introspection_addr: "0.0.0.0:6061"
# http_listen_addr: "0.0.0.0:6060"
# log_level: info
#
# indexer:
#   connstring: "postgresql://clair:clair-password@clair-db:5432/clair?sslmode=disable"
#   scanlock_retry: 10
#   layer_scan_concurrency: 5
#   migrations: true
#
# matcher:
#   connstring: "postgresql://clair:clair-password@clair-db:5432/clair?sslmode=disable"
#   max_conn_pool: 100
#   migrations: true
#   updater_sets:
#     - "debian"
#     - "ubuntu"
#     - "rhel"
#     - "alpine"
#     - "aws"
#
# updaters:
#   sets:
#     - "debian"
#     - "ubuntu"
#     - "rhel"
#     - "alpine"
#     - "aws"
#   config:
#     debian:
#       url: "https://security-tracker.debian.org/tracker/data/json"
#     ubuntu:
#       url: "https://people.canonical.com/~ubuntu-security/cve/"
#
# notifier:
#   connstring: "postgresql://clair:clair-password@clair-db:5432/clair?sslmode=disable"
#   migrations: true
#   indexer_addr: "clair:6060"
#   matcher_addr: "clair:6060"
#   poll_interval: "5m"
#   delivery_interval: "1m"
#
# auth:
#   psk:
#     key: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI="
#     iss: ["clair-scanner"]
#
# trace:
#   name: "jaeger"
#   probability: 1.0
#   jaeger:
#     agent:
#       endpoint: "localhost:6831"
#     service_name: "clair"

# Usage Examples:
#
# 1. Start Clair with database:
#    docker-compose up -d clair clair-db
#
# 2. Start with monitoring:
#    docker-compose --profile monitoring up -d
#
# 3. Run vulnerability update:
#    docker-compose --profile updater run clair-updater
#
# 4. Scan image using scanner:
#    docker-compose --profile tools run clair-scanner \
#      scan --image nginx:latest --report /results/nginx-scan.json
#
# 5. Check Clair health:
#    curl http://localhost:6061/health
#
# 6. Get Clair version:
#    curl http://localhost:6060/openapi/v1
#
# 7. Submit image for scanning via API:
#    curl -X POST "http://localhost:6060/indexer/api/v1/index_report" \
#      -H "Content-Type: application/json" \
#      -d '{"hash":"sha256:...", "uri":"docker://nginx:latest"}'
