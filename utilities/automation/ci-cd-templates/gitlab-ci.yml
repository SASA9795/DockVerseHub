# Location: utilities/automation/ci-cd-templates/gitlab-ci.yml
# GitLab CI/CD pipeline for Docker applications

stages:
  - lint
  - build
  - test
  - security
  - deploy-staging
  - deploy-production

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  DOCKER_BUILDKIT: 1

# Global before script
before_script:
  - echo "Starting pipeline for $CI_COMMIT_REF_NAME"

# Dockerfile linting
dockerfile-lint:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    - find . -name "Dockerfile*" -exec hadolint {} \;
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Custom linting with Python script
custom-lint:
  stage: lint
  image: python:3.11-slim
  script:
    - python utilities/dev-tools/dockerfile-linter.py $(find . -name "Dockerfile*")
  artifacts:
    reports:
      junit: lint-results.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Build Docker images
.build_template: &build_template
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      # Build with BuildKit and multi-stage caching
      docker buildx create --use --driver docker-container --name builder
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --file $DOCKERFILE \
        --tag $IMAGE_NAME:$CI_COMMIT_SHA \
        --tag $IMAGE_NAME:$CI_COMMIT_REF_SLUG \
        --cache-from type=registry,ref=$IMAGE_NAME:cache \
        --cache-to type=registry,ref=$IMAGE_NAME:cache,mode=max \
        --push .
  variables:
    DOCKERFILE: Dockerfile

build-main:
  <<: *build_template
  variables:
    DOCKERFILE: Dockerfile
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build-production:
  <<: *build_template
  variables:
    DOCKERFILE: Dockerfile.production
  rules:
    - if: $CI_COMMIT_TAG

# Container structure tests
container-structure-test:
  stage: test
  image: gcr.io/gcp-runtimes/container-structure-test:latest
  script:
    - container-structure-test test --image $IMAGE_NAME:$CI_COMMIT_SHA --config test/container-structure-test.yaml
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  dependencies:
    - build-main

# Application tests in container
app-tests:
  stage: test
  image: docker:24-cli
  services:
    - docker:24-dind
  script:
    - |
      # Run application tests inside container
      docker run --rm $IMAGE_NAME:$CI_COMMIT_SHA npm test
      docker run --rm $IMAGE_NAME:$CI_COMMIT_SHA python -m pytest
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  dependencies:
    - build-main

# Security scanning with Trivy
trivy-security-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy image --format template --template "@contrib/sarif.tpl" -o trivy-results.sarif $IMAGE_NAME:$CI_COMMIT_SHA
    - trivy image --format json -o trivy-results.json $IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    reports:
      sast: trivy-results.sarif
    paths:
      - trivy-results.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  dependencies:
    - build-main

# Custom security scanning
custom-security-scan:
  stage: security
  image: python:3.11-slim
  before_script:
    - apt-get update && apt-get install -y curl
    - pip install docker
  script:
    - python utilities/dev-tools/image-scanner.py $IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    paths:
      - security-scan-results.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-main

# Performance benchmarking
performance-benchmark:
  stage: security
  image: docker:24-cli
  services:
    - docker:24-dind
  script:
    - bash utilities/scripts/performance_benchmark.sh --image $IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    paths:
      - benchmark_results/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-main

# Deploy to staging environment
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl docker-cli
  script:
    - |
      echo "Deploying to staging environment"
      # Update staging deployment
      bash utilities/automation/deployment/rolling-update.sh \
        --image $IMAGE_NAME:$CI_COMMIT_SHA \
        --environment staging \
        --replicas 2
    - |
      # Health check
      bash utilities/scripts/health_check.sh \
        --url https://staging.example.com/health \
        --timeout 300
  environment:
    name: staging
    url: https://staging.example.com
    deployment_tier: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  dependencies:
    - build-main
    - trivy-security-scan

# Deploy to production with blue-green strategy
deploy-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl docker-cli
  script:
    - |
      echo "Deploying to production with blue-green strategy"
      bash utilities/automation/deployment/blue-green.sh deploy \
        $IMAGE_NAME:$CI_COMMIT_SHA
    - |
      # Verify deployment
      bash utilities/scripts/health_check.sh \
        --url https://example.com/health \
        --timeout 600
  environment:
    name: production
    url: https://example.com
    deployment_tier: production
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: manual
  dependencies:
    - build-production
    - trivy-security-scan

# Rollback production deployment
rollback-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl
  script:
    - |
      echo "Rolling back production deployment"
      bash utilities/automation/deployment/blue-green.sh rollback
  environment:
    name: production
    url: https://example.com
    action: stop
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: manual
      allow_failure: false

# Cleanup old images
cleanup:
  stage: deploy-production
  image: docker:24-cli
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      # Keep only last 10 images
      IMAGES_TO_DELETE=$(docker images $IMAGE_NAME --format "{{.Tag}}" | grep -E '^[0-9a-f]{40}$' | tail -n +11)
      for tag in $IMAGES_TO_DELETE; do
        echo "Deleting $IMAGE_NAME:$tag"
        docker rmi $IMAGE_NAME:$tag || true
      done
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  allow_failure: true

# Release notes generation
generate-release-notes:
  stage: deploy-production
  image: alpine/git:latest
  script:
    - |
      # Generate release notes from git commits
      git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > RELEASE_NOTES.md
      echo "Release notes generated"
  artifacts:
    paths:
      - RELEASE_NOTES.md
    expire_in: 1 month
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/

# Notification job
notify:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      # Send Slack notification
      curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"Deployment completed for '$CI_PROJECT_NAME' version '$CI_COMMIT_TAG'"}' \
        $SLACK_WEBHOOK_URL
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  dependencies:
    - deploy-production

# Cache configuration
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .docker/
    - node_modules/
    - __pycache__/
    - .pip-cache/
